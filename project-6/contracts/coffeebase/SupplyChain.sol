// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is
    FarmerRole,
    DistributorRole,
    RetailerRole,
    ConsumerRole
{
    // Define 'owner'
    address owner;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint256 sku = 1;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping(uint256 => Item) items;

    // Define enum 'State' with the following values:
    enum State {
        Harvested, // 0
        Processed, // 1
        Packed, // 2
        ForSale, // 3
        Sold, // 4
        Shipped, // 5
        Received, // 6
        Purchased // 7
    }

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation; // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude; // Farm Longitude
        uint256 productID; // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint256 productPrice; // Product Price
        State itemState; // Product State as represented in the enum above
        address distributorID; // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event Harvested(uint256 upc);
    event Processed(uint256 upc);
    event Packed(uint256 upc);
    event ForSale(uint256 upc);
    event Sold(uint256 upc);
    event Shipped(uint256 upc);
    event Received(uint256 upc);
    event Purchased(uint256 upc);

    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner of the contract");
        _;
    }

    // Define a modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(msg.sender == _address, "You can't call this method");
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint256 _price) {
        require(msg.value >= _price, "You didn't send enough ether");
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint256 _upc) {
        _;
        uint256 _price = items[_upc].productPrice;
        uint256 amountToReturn = msg.value - _price;
        payable(items[_upc].consumerID).transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier itemHasExpectedState(uint256 _upc, State expected) {
        require(items[_upc].itemState == expected);
        _;
    }

    constructor() payable {
        owner = msg.sender;
    }

    // Define a function 'kill' if required
    function kill() public onlyOwner {
        selfdestruct(payable(owner));
    }

    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function harvestItem(
        uint256 _upc,
        address _originFarmerID,
        string memory _originFarmName,
        string memory _originFarmInformation,
        string memory _originFarmLatitude,
        string memory _originFarmLongitude,
        string memory _productNotes
    ) public onlyFarmer {
        // Add the new item as part of Harvest
        items[_upc] = Item(
            sku,
            _upc,
            msg.sender,
            _originFarmerID,
            _originFarmName,
            _originFarmInformation,
            _originFarmLatitude,
            _originFarmLongitude,
            _upc + sku,
            _productNotes,
            0, // no price yet
            State.Harvested,
            address(0), // no distributorID yet
            address(0), // no retailerID yet
            address(0) // no consumerID yet
        );
        // Increment sku
        sku = sku + 1;
        // Emit the appropriate event
        emit Harvested(_upc);
    }

    // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
    function processItem(uint256 _upc)
        public
        onlyFarmer
        itemHasExpectedState(_upc, State.Harvested)
        verifyCaller(items[_upc].ownerID)
    {
        Item memory item = items[_upc];
        item.itemState = State.Processed;
        items[_upc] = item;
        emit Processed(_upc);
    }

    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
    function packItem(uint256 _upc)
        public
        onlyFarmer
        itemHasExpectedState(_upc, State.Processed)
        verifyCaller(items[_upc].ownerID)
    {
        Item memory item = items[_upc];
        item.itemState = State.Packed;
        items[_upc] = item;
        emit Packed(_upc);
    }

    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    function sellItem(uint256 _upc, uint256 _price)
        public
        onlyFarmer
        itemHasExpectedState(_upc, State.Packed)
        verifyCaller(items[_upc].ownerID)
    {
        Item memory item = items[_upc];
        item.itemState = State.ForSale;
        item.productPrice = _price;
        items[_upc] = item;
        emit ForSale(_upc);
    }

    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
    // and any excess ether sent is refunded back to the buyer
    function buyItem(uint256 _upc)
        public
        payable
        itemHasExpectedState(_upc, State.ForSale)
        paidEnough(items[_upc].productPrice)
        checkValue(_upc)
    {
        // Update the appropriate fields - ownerID, distributorID, itemState
        Item memory item = items[_upc];
        item.ownerID = msg.sender;
        item.distributorID = msg.sender;
        item.itemState = State.Sold;
        items[_upc] = item;
        // Transfer money to farmer
        payable(item.originFarmerID).transfer(item.productPrice);
        // emit the appropriate event
        emit Sold(_upc);
    }

    // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
    // Use the above modifers to check if the item is sold
    function shipItem(uint256 _upc)
        public
        onlyDistributor
        itemHasExpectedState(_upc, State.Sold)
        verifyCaller(items[_upc].ownerID)
    {
        // Update the appropriate fields
        Item memory item = items[_upc];
        item.itemState = State.Shipped;
        items[_upc] = item;
        // Emit the appropriate event
        emit Shipped(_upc);
    }

    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
    // Use the above modifiers to check if the item is shipped
    function receiveItem(uint256 _upc)
        public
        onlyRetailer
        itemHasExpectedState(_upc, State.Shipped)
    {
        // Update the appropriate fields - ownerID, retailerID, itemState
        Item memory item = items[_upc];
        item.ownerID = msg.sender;
        item.retailerID = msg.sender;
        item.itemState = State.Received;
        items[_upc] = item;
        // Emit the appropriate event
        emit Received(_upc);
    }

    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
    // Use the above modifiers to check if the item is received
    function purchaseItem(uint256 _upc)
        public
        onlyConsumer
        itemHasExpectedState(_upc, State.Received)
    {
        // Update the appropriate fields - ownerID, consumerID, itemState
        Item memory item = items[_upc];
        item.ownerID = msg.sender;
        item.consumerID = msg.sender;
        item.itemState = State.Purchased;
        items[_upc] = item;
        // Emit the appropriate event
        emit Purchased(_upc);
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItem(uint256 _upc) public view returns (Item memory) {
        return items[_upc];
    }
}

// Can't implement Ownable as size get's exceeded
// Can't put messages for all modifiers cause size get's exceeded
