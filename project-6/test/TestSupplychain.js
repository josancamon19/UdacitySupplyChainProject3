// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function (accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")

    const ownerAddress = accounts[0]
    const farmerAddress = accounts[1]
    const distributorAddress = accounts[2]
    const retailerAddress = accounts[3]
    const consumerAddress = accounts[4]

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    var supplyChain;

    beforeEach(async () => {
        if (supplyChain == null) {
            supplyChain = await SupplyChain.deployed();
            await supplyChain.addFarmer(farmerAddress);
            await supplyChain.addDistributor(distributorAddress);
            await supplyChain.addRetailer(retailerAddress);
            await supplyChain.addConsumer(consumerAddress);
        }

    })

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, farmerAddress, originFarmName, originFarmInformation, originFarmLatitude,
            originFarmLongitude, productNotes, {
                from: farmerAddress
            })

        // Get events emitted in the latest block
        let events = await supplyChain.getPastEvents('Harvested');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const data = await supplyChain.fetchItem.call(upc)

        // Verify the result set
        assert.equal(data.sku, sku, 'Error: Invalid item SKU')
        assert.equal(data.upc, upc, 'Error: Invalid item UPC')
        assert.equal(data.ownerID, farmerAddress, 'Error: Missing or Invalid ownerID')
        assert.equal(data.originFarmerID, farmerAddress, 'Error: Missing or Invalid originFarmerID')
        assert.equal(data.originFarmName, originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(data.originFarmInformation, originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(data.originFarmLatitude, originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(data.originFarmLongitude, originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(data.itemState, 0, 'Error: Invalid item State')
        assert.equal(events.length, 1, 'Error: No Harvested event found');
    })

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, {
            from: farmerAddress
        });
        let events = await supplyChain.getPastEvents('Processed');
        const data = await supplyChain.fetchItem.call(upc)

        // Verify the result set
        assert.equal(data.itemState, 1, 'Error: Invalid item State')
        assert.equal(events.length, 1, 'Error: No Processed event found');
    })

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, {
            from: farmerAddress
        })
        let events = await supplyChain.getPastEvents('Packed');
        const data = await supplyChain.fetchItem.call(upc);

        // Verify the result set
        assert.equal(data.itemState, 2, 'Error: Invalid item State')
        assert.equal(events.length, 1, 'Error: No Packed event found');

    })

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, {
            from: farmerAddress
        })
        let events = await supplyChain.getPastEvents('ForSale');
        const data = await supplyChain.fetchItem.call(upc);

        // Verify the result set
        assert.equal(data.itemState, 3, 'Error: Invalid item State')
        assert.equal(events.length, 1, 'Error: No ForSale event found');

    })

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {
            from: distributorAddress,
            value: productPrice
        })
        let events = await supplyChain.getPastEvents('Sold');
        const data = await supplyChain.fetchItem.call(upc);

        // Verify the result set
        assert.equal(data.itemState, 4, 'Error: Invalid item State')
        assert.equal(events.length, 1, 'Error: No Sold event found');

    })

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
        await supplyChain.shipItem(upc, {
            from: distributorAddress
        })
        let events = await supplyChain.getPastEvents('Shipped');
        const data = await supplyChain.fetchItem.call(upc);

        assert.equal(data.itemState, 5, 'Error: Invalid item State')
        assert.equal(events.length, 1, 'Error: No Sold event found');

    })

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
        await supplyChain.receiveItem(upc, {
            from: retailerAddress,
        })
        let events = await supplyChain.getPastEvents('Received');
        const data = await supplyChain.fetchItem.call(upc);

        assert.equal(data.itemState, 6, 'Error: Invalid item State');
        assert.equal(events.length, 1, 'Error: No Sold event found');
    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
        const supplyChain = await SupplyChain.deployed()

        await supplyChain.purchaseItem(upc, {
            from: consumerAddress,
        })
        let events = await supplyChain.getPastEvents('Purchased');
        const data = await supplyChain.fetchItem.call(upc);

        assert.equal(data.itemState, 7, 'Error: Invalid item State');
        assert.equal(events.length, 1, 'Error: No Sold event found');

    })

    // 9th Test
    it("Testing smart contract function fetchItem() that allows anyone to fetch item details from blockchain", async () => {
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const data = await supplyChain.fetchItem.call(upc);

        // Verify the result set:
        assert.equal(data.sku, sku, 'Error: Invalid item SKU')
        assert.equal(data.upc, upc, 'Error: Invalid item UPC')
        assert.equal(data.originFarmerID, farmerAddress, 'Error: Missing or Invalid ownerID')
        assert.equal(data.originFarmName, originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(data.originFarmInformation, originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(data.originFarmLatitude, originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(data.originFarmLongitude, originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(data.productNotes, productNotes, 'Error: Missing or Invalid productNotes');
    })

});